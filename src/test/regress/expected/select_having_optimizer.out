--
-- SELECT_HAVING
--
-- load test data
CREATE TABLE test_having (a int, b int, c char(8), d char);
INSERT INTO test_having VALUES (0, 1, 'XXXX', 'A');
INSERT INTO test_having VALUES (1, 2, 'AAAA', 'b');
INSERT INTO test_having VALUES (2, 2, 'AAAA', 'c');
INSERT INTO test_having VALUES (3, 3, 'BBBB', 'D');
INSERT INTO test_having VALUES (4, 3, 'BBBB', 'e');
INSERT INTO test_having VALUES (5, 3, 'bbbb', 'F');
INSERT INTO test_having VALUES (6, 4, 'cccc', 'g');
INSERT INTO test_having VALUES (7, 4, 'cccc', 'h');
INSERT INTO test_having VALUES (8, 4, 'CCCC', 'I');
INSERT INTO test_having VALUES (9, 4, 'CCCC', 'j');
SELECT b, c FROM test_having
	GROUP BY b, c HAVING count(*) = 1 ORDER BY b, c;
 b |    c     
---+----------
 1 | XXXX    
 3 | bbbb    
(2 rows)

-- HAVING is effectively equivalent to WHERE in this case
SELECT b, c FROM test_having
	GROUP BY b, c HAVING b = 3 ORDER BY b, c;
 b |    c     
---+----------
 3 | BBBB    
 3 | bbbb    
(2 rows)

SELECT lower(c), count(c) FROM test_having
	GROUP BY lower(c) HAVING count(*) > 2 OR min(a) = max(a)
	ORDER BY lower(c);
 lower | count 
-------+-------
 bbbb  |     3
 cccc  |     4
 xxxx  |     1
(3 rows)

SELECT c, max(a) FROM test_having
	GROUP BY c HAVING count(*) > 2 OR min(a) = max(a)
	ORDER BY c;
    c     | max 
----------+-----
 XXXX     |   0
 bbbb     |   5
(2 rows)

-- test degenerate cases involving HAVING without GROUP BY
-- Per SQL spec, these should generate 0 or 1 row, even without aggregates
SELECT min(a), max(a) FROM test_having HAVING min(a) = max(a);
 min | max 
-----+-----
(0 rows)

SELECT min(a), max(a) FROM test_having HAVING min(a) < max(a);
 min | max 
-----+-----
   0 |   9
(1 row)

-- errors: ungrouped column references
SELECT a FROM test_having HAVING min(a) < max(a);
ERROR:  column "test_having.a" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: SELECT a FROM test_having HAVING min(a) < max(a);
               ^
SELECT 1 AS one FROM test_having HAVING a > 1;
ERROR:  column "test_having.a" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: SELECT 1 AS one FROM test_having HAVING a > 1;
                                                ^
-- the really degenerate case: need not scan table at all
SELECT 1 AS one FROM test_having HAVING 1 > 2;
 one 
-----
(0 rows)

SELECT 1 AS one FROM test_having HAVING 1 < 2;
 one 
-----
   1
(1 row)

-- and just to prove that we aren't scanning the table:
SELECT 1 AS one FROM test_having WHERE 1/a = 1 HAVING 1 < 2;
 one 
-----
   1
(1 row)

-- placeholder var in haveingQual
select
  count(t2.b), count(t1c) t1c
from
  test_having t2
  left join (
    select
      a, format('%s', c) t1c
    from
      test_having t1
  ) tt on t2.a = tt.a
having count(t1c) is not null;
 count | t1c 
-------+-----
    10 |  10
(1 row)

DROP TABLE test_having;
create temp table gstest2 (a integer, b integer, c integer, d integer,
                           e integer, f integer, g integer, h integer);
copy gstest2 from stdin;
ANALYZE gstest2;
explain (costs off)
select a,count(*) from gstest2 group by rollup(a) having a is distinct from 1 order by a;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice3; segments: 3)
   Merge Key: share0_ref2.a
   ->  Sort
         Sort Key: share0_ref2.a
         ->  Sequence
               ->  Shared Scan (share slice:id 3:0)
                     ->  Materialize
                           ->  Seq Scan on gstest2
               ->  Append
                     ->  GroupAggregate
                           Group Key: share0_ref2.a
                           ->  Sort
                                 Sort Key: share0_ref2.a
                                 ->  Result
                                       Filter: (share0_ref2.a IS DISTINCT FROM 1)
                                       ->  Shared Scan (share slice:id 3:0)
                     ->  Result
                           Filter: ("outer".a IS DISTINCT FROM 1)
                           ->  Result
                                 ->  Redistribute Motion 1:3  (slice2)
                                       ->  Aggregate
                                             ->  Gather Motion 3:1  (slice1; segments: 3)
                                                   ->  Aggregate
                                                         ->  Shared Scan (share slice:id 1:0)
 Optimizer: Pivotal Optimizer (GPORCA)
(25 rows)

select a,count(*) from gstest2 group by rollup(a) having a is distinct from 1 order by a;
 a | count 
---+-------
 2 |     1
   |     9
(2 rows)

explain (costs off)
select v.c, (select count(*) from gstest2 group by () having v.c)
  from (values (false),(true)) v(c) order by v.c;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort
   Sort Key: "*VALUES*".column1
   ->  Values Scan on "*VALUES*"
         SubPlan 1  (slice0)
           ->  Aggregate
                 Filter: "*VALUES*".column1
                 ->  Result
                       ->  Materialize
                             ->  Gather Motion 3:1  (slice1; segments: 3)
                                   ->  Seq Scan on gstest2
 Optimizer: Postgres query optimizer
(11 rows)

select v.c, (select count(*) from gstest2 group by () having v.c)
  from (values (false),(true)) v(c) order by v.c;
 c | count 
---+-------
 f |      
 t |     9
(2 rows)

